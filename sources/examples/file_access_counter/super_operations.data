interceptor.name = super_operations_interceptor
interceptor.operations_prefix = super_operations

header =>>
/* ========================================================================
 * Copyright (C) 2011, Andrey V. Tsyvarev  <tsyvarev@ispras.ru>
 *
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ======================================================================== */


#include <linux/fs.h>
<<

object.type = struct super_block
object.operations_field = s_op

operations.type = struct super_operations

[group]
operation.name = alloc_inode
operation.returnType = struct inode *

operation.arg.type = struct super_block *
operation.arg.name = sb

operation.object = sb

operation.default =>>
struct inode* inode = kmalloc(sizeof(struct inode), GFP_KERNEL);
if(inode) inode_init_once(inode);
return inode;
<<
operation.group_id = 1

[group]
operation.name = destroy_inode

operation.arg.type = struct inode*
operation.arg.name = inode

operation.object = inode->i_sb

operation.default = kfree(inode);
operation.group_id = 1

## to be continued...