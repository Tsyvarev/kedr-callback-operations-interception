interceptor.name = dentry_operations_interceptor
interceptor.operations_prefix = dentry_operations

header =>>
/* ========================================================================
 * Copyright (C) 2011, Andrey V. Tsyvarev  <tsyvarev@ispras.ru>
 *
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 ======================================================================== */


#include <linux/fs.h>
<<


object.type = struct dentry
object.operations_field = d_op

operations.type = struct dentry_operations

[group]
operation.name = d_revalidate
operation.returnType = int

operation.arg.type = struct dentry *
operation.arg.name = dentry

operation.arg.type = struct nameidata *
operation.arg.name = nd

operation.object = dentry

# Called from d_revalidate; checked in d_set_d_op
operation.default = return 1;//always valid dentry

[group]
operation.name = d_release

operation.arg.type = struct dentry *
operation.arg.name = dentry

operation.object = dentry

# Called from d_free
operation.default = return;//do nothing


[group]
operation.name = d_iput

operation.arg.type = struct dentry *
operation.arg.name = dentry

operation.arg.type = struct inode *
operation.arg.name = inode

operation.object = dentry

# Called from dentry_iput
operation.default = iput(inode);

[group]
operation.name = d_dname
operation.returnType = char *

operation.arg.type = struct dentry *
operation.arg.name = dentry

operation.arg.type = char *
operation.arg.name = buf

operation.arg.type = int
operation.arg.name = buflen

operation.object = dentry

# Called by d_path[_with_unreachable]

# Implementation of path construction.
#
# Because some sync mechanizms are not accessible for modules, NULL
# poiner to operation shouldn't be replaced.
implementation_header=>>

static int prepend(char **buffer, int *buflen, const char *str, int namelen)
{
    *buflen -= namelen;
    if (*buflen < 0)
         return -ENAMETOOLONG;
    *buffer -= namelen;
    memcpy(*buffer, str, namelen);
    return 0;
}

static char *dentry_path_my(struct dentry *dentry, char *buf, int buflen)
{
    char *end = buf + buflen;
    char *retval;

    prepend(&end, &buflen, "\0", 1);
    if (d_unlinked(dentry) &&
         (prepend(&end, &buflen, "//deleted", 9) != 0))
                 goto Elong;
    if (buflen < 1)
         goto Elong;
    /* Get '/' right */
    retval = end-1;
    *retval = '/';

    while (!IS_ROOT(dentry)) {
         struct dentry *parent = dentry->d_parent;

         prefetch(parent);
         if ((prepend(&end, &buflen, dentry->d_name.name, dentry->d_name.len) != 0) ||
             (prepend(&end, &buflen, "/", 1) != 0))
                 goto Elong;

         retval = end;
         dentry = parent;
    }
    return retval;
Elong:
    return ERR_PTR(-ENAMETOOLONG);
}

<<

operation.default = return dentry_path_my(dentry, buf, buflen);
