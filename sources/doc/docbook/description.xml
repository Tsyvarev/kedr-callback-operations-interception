<section id="description">
<title>Description</title>
<para>
On the top level, the library operates with <firstterm linkend="interceptor">interceptors</firstterm>. Interceptor is a special object, which contains all information about how to intercept callback operations of the objects of particular type.
</para>
<para>
One piece of information, which interceptor contains, is what callback operations should be intercepted and what functions should be called before and/or after them. This information is organized into another special objects - <firstterm linkend="payload">payloads</firstterm>, which should be registered using suitable interceptor for take an effect.
</para>
<para>
Another piece of information for interceptor - set of objects, operations on which should be intercepted. These objects are reffered to as <emphasis>watched</emphasis>. For make object watched by the interceptor, one need to call <function linkend="api_reference.interceptor.watch">kedr_coi_interceptor_watch</function>. <function linkend="api_reference.interceptor.forget">kedr_coi_interceptor_forget</function> removes object from the set.
</para>
<para>
These two pieces of information cannot be changed in mix. There are two state of interceptor:
'initialized' and 'started'.
</para>
<para>
When created, interceptor is in the first state, which allows registration and deregistration of payloads. But set of watched objects at this state is empty and cannot be changed.
</para>
<para>
After call of <function linkend="api_reference.interceptor.start">kedr_coi_interceptor_start</function> interceptor moves from the first state to the second. At this moment, on the contrary, set of registered payloads become fixed, but set of watched objects is allowed to change. For return to the first state, one should call <function linkend="api_reference.interceptor.stop">kedr_coi_interceptor_stop</function>.
</para>

</section> <!-- End of "description" -->